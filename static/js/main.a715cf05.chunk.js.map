{"version":3,"sources":["constants/index.js","components/SelectDropdown/SingleOption.jsx","components/SelectDropdown/arrow_down.svg","components/SelectDropdown/SelectDropdown.jsx","components/DashboardTest/DashboardTest.jsx","App.jsx","index.js"],"names":["TEST","SELECT_DROPDOWN","id","name","authCode","hoverClass","cursor","backgroundColor","color","transition","useStyles","makeStyles","theme","baseStyle","padding","borderBottom","listStyle","fontSize","fontSizeRem","selectableSingleOption","selectedClass","SingleOption","memo","index","optionName","dataElement","undefined","isThisSelected","selectDropdownOption","tabIndex","classes","onKeyDown","event","keyCode","className","onClick","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","stroke","strokeWidth","_ref","svgRef","title","props","width","height","viewBox","ref","ForwardRef","forwardRef","getFontSizeValue","fontSizeValueRem","test","parseFloat","transitionObject","WebkitTransition","MozTransition","OTransition","selectDropdown","numMaxLengthChars","margin","position","selectDropdownOpener","display","justifyContent","alignItems","border","borderRadius","closeDropdown","openDropdown","top","arrowDownIcon","paddingLeft","arrowDownIconReverse","transform","optionsContainer","borderBottomWidth","zIndex","selectDropdownCurrentValue","SelectDropdown","selectDropdownOptionsProp","nameFieldToShow","defaultValue","closeAfterSelection","onChange","doesDefaultValueExist","getFilteredSelectDropdownOptions","selectOptions","nameFieldAccepted","filter","item","getFirstDropdownOptionWithNameFieldToShow","listOptions","find","option","getDefaultValueChoosenDropdownOptionState","defaultValueExist","Array","isArray","useMemo","value","Math","max","map","defaultValueLength","getOptionMaxLengthNum","useState","selectOptionsState","setSelectOptionsState","menuOpenState","setMenuOpenState","positionIndex","choosenDropdownOptionState","setChoosenDropdownOptionState","toggleMenuDropdown","newPositionIndex","useEffect","HTMLOptionsMenu","resultArray","indexValue","defaultElement","getHTMLOptionsMenu","formBaseStyle","bottom","DashboardTest","defaultDefaultValue","defaultValueRef","useRef","fontSizeRemRef","JSONRef","nameFieldToShowRef","selectDropdownOptions","stateProps","setStateProps","toggleState","setToggleState","getParsedJSON","jsonToParse","JSON","parse","exc","console","error","getValidateJSON","json","fallbackValue","parsedJSON","JSONNoSpaces","replace","parsedJSONNoSpaces","obj","log","TextField","label","variant","stringify","inputRef","FormControlLabel","control","Switch","checked","Button","newJSONInsertedList","current","defaultValueJSON","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a715cf05.chunk.js","sourcesContent":["export const TEST = {\n  SELECT_DROPDOWN: [\n    {\n      id: \"1\",\n      name: \"Option1\",\n      authCode: \"ljefjbwje230fh3ub23i\",\n    },\n    {\n      id: \"2\",\n      name: \"Option2\",\n      authCode: \"ljefjbwje230fh3ub23i\",\n    },\n    {\n      id: \"3\",\n      name: \"Option3lbefklh eh djhubjkdvhk\",\n      authCode: \"ljefjbwje230fh3ub23i\",\n    },\n    {\n      id: \"4\",\n      name: \"Option4\",\n      authCode: \"ljefjbwje230fh3ub23i\",\n    },\n    {\n      id: \"5\",\n      name: \"Option5\",\n      authCode: \"ljefjbwje230fh3ub23i\",\n    },\n  ],\n};\n","import React, { memo } from \"react\";\n// Material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst hoverClass = {\n  cursor: \"pointer\",\n  backgroundColor: \"#292929\",\n  color: \"#fff\",\n  transition: \".3s\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  baseStyle: {\n    padding: \"1rem 2rem\",\n    borderBottom: \"2px solid #292929\",\n    listStyle: \"none\",\n    fontSize: ({ fontSizeRem }) => `${fontSizeRem}rem`,\n  },\n  selectableSingleOption: {\n    backgroundColor: \"gray\",\n    \"&:hover\": hoverClass,\n  },\n  selectedClass: hoverClass,\n}));\n\nconst SingleOption = memo(\n  ({\n    index = 0,\n    optionName = \"Default option\",\n    dataElement = undefined,\n    isThisSelected = false,\n    fontSizeRem = 1.2,\n    selectDropdownOption = () => {},\n    tabIndex = 0,\n  }) => {\n    const classes = useStyles({ fontSizeRem });\n\n    // Event Key handlers\n    const eventKeyHandlers = (event) => {\n      if (event.keyCode === 13) {\n        selectDropdownOption(index, dataElement);\n      }\n    };\n\n    return (\n      <li\n        tabIndex={tabIndex}\n        onKeyDown={eventKeyHandlers}\n        className={`${classes.baseStyle} ${\n          isThisSelected\n            ? classes.selectedClass\n            : classes.selectableSingleOption\n        }`}\n        onClick={() => selectDropdownOption(index, dataElement)}\n      >\n        {optionName}\n      </li>\n    );\n  }\n);\n\nexport default SingleOption;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10.6623 12.5909L0.964286 2.89286C0.431725 2.3603 0.431726 1.49685 0.964286 0.964286C1.49685 0.431726 2.3603 0.431726 2.89286 0.964286L11.1169 9.18829C11.3679 9.43934 11.7749 9.43934 12.026 9.18829L20.25 0.964286C20.7826 0.431725 21.646 0.431726 22.1786 0.964286C22.7111 1.49685 22.7111 2.3603 22.1786 2.89286L12.4806 12.5909C11.9785 13.093 11.1644 13.093 10.6623 12.5909Z\",\n  fill: \"#292929\",\n  stroke: \"#292929\",\n  strokeWidth: 0.128571\n});\n\nvar SvgArrowDown = function SvgArrowDown(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 23,\n    height: 14,\n    viewBox: \"0 0 23 14\",\n    fill: \"none\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgArrowDown, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/arrow_down.4c780950.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, memo, useMemo, useCallback } from \"react\";\n// Material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\n// Components\nimport SingleOption from \"./SingleOption\";\n// SVG\nimport { ReactComponent as ArrowDown } from \"./arrow_down.svg\";\n\n// if the fontSizeValueRem is a number type value, the function returns it\n// if the fontSizeValueRem is a string type value, the function check is the format is a number format\nconst getFontSizeValue = (fontSizeValueRem) => {\n  return typeof fontSizeValueRem === \"number\"\n    ? fontSizeValueRem\n    : typeof fontSizeValueRem === \"string\" &&\n      /^[\\d]+.?[\\d]*/.test(fontSizeValueRem)\n    ? parseFloat(fontSizeValueRem)\n    : 1.2;\n};\n\n// Constant object for transition cross-browsing compatibility\nconst transitionObject = {\n  transition: \".3s\",\n  WebkitTransition: \".3s\",\n  MozTransition: \".3s\",\n  OTransition: \".3s\",\n};\n\n// Define style classes\nconst useStyles = makeStyles((theme) => ({\n  selectDropdown: ({ fontSizeValueRem, numMaxLengthChars }) => ({\n    margin: \"auto\",\n    position: \"relative\",\n    // Calculate the width based on fontSize expressed in rem and the word with more characters\n    width: `calc((${fontSizeValueRem}rem / 2) * ${numMaxLengthChars} + 6.4rem)`,\n  }),\n  selectDropdownOpener: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"1rem 2rem\",\n    border: \"3px solid #292929\",\n    borderRadius: \"4px\",\n    cursor: \"pointer\",\n  },\n  closeDropdown: {\n    transition: \".3s\",\n    display: \"none\",\n  },\n  openDropdown: ({ fontSizeValueRem }) => ({\n    transition: \".3s\",\n    display: \"block\",\n    top: `calc(2rem + ${fontSizeValueRem} + 6px)`,\n  }),\n  arrowDownIcon: {\n    paddingLeft: \"1rem\",\n    position: \"relative\",\n    top: \"2px\",\n    height: ({ fontSizeValueRem }) => `${fontSizeValueRem}rem`,\n    ...transitionObject,\n  },\n  arrowDownIconReverse: {\n    ...transitionObject,\n    transform: \"rotateX(180deg)\",\n  },\n  optionsContainer: {\n    position: \"absolute\",\n    border: \"3px solid #292929\",\n    borderBottomWidth: \"1px\",\n    borderRadius: \"0 4px 4px 4px\",\n    zIndex: 80,\n  },\n  selectDropdownCurrentValue: {\n    fontSize: ({ fontSizeValueRem }) =>\n      `${getFontSizeValue(fontSizeValueRem)}rem`,\n  },\n}));\n\n/**\n * @param selectDropdownOptionsProp Array of objects which represents the list of options to select\n * @param nameFieldToShow Name of the field which contains the text to display in the menu options\n * @param defaultValue Default value that the dropdown assumes (Example: \"Choose option\")\n * @param closeAfterSelection If true the options menu will close once an option is selected by the user, otherwise the user will have to manually close the menu\n * @param fontSizeValueRem Numeric value of the font size expressed in rem\n * @param onChange Function to call every time an option is selected\n */\nconst SelectDropdown = memo(\n  ({\n    selectDropdownOptionsProp = [],\n    nameFieldToShow = undefined,\n    defaultValue = undefined,\n    closeAfterSelection = false,\n    fontSizeValueRem = 1.2,\n    onChange = undefined,\n  }) => {\n    // define if a default value is passed\n    const doesDefaultValueExist =\n      defaultValue?.hasOwnProperty(nameFieldToShow) ?? false;\n\n    const getFilteredSelectDropdownOptions = (\n      selectOptions,\n      nameFieldAccepted\n    ) =>\n      selectOptions.filter((item) => {\n        return item && item.hasOwnProperty(nameFieldAccepted);\n      });\n\n    // return the length of the word with more characters inside selectDropdownOptionsProp list\n    // (this is used to calculate previously the width of the select-dropdown)\n    const getOptionMaxLengthNum = (listOptions) => {\n      if (\n        !Array.isArray(\n          getFilteredSelectDropdownOptions(\n            selectDropdownOptionsProp,\n            nameFieldToShow\n          )\n        )\n      ) {\n        return 0;\n      }\n      // get the number value of the word with max length inside the array\n      let value = Math.max(\n        ...listOptions.map((item) => item[nameFieldToShow]?.length ?? 0)\n      );\n\n      let defaultValueLength = doesDefaultValueExist\n        ? defaultValue[nameFieldToShow].length\n        : 0;\n\n      return Math.max(value, defaultValueLength);\n    };\n\n    // return the first object inside selectDropdownOptionsProp which has a field named as the content of nameFieldToShow\n    const getFirstDropdownOptionWithNameFieldToShow = (listOptions) =>\n      listOptions.find((option) => option?.[nameFieldToShow]);\n\n    const getDefaultValueChoosenDropdownOptionState = (\n      defaultValueExist = false\n    ) => {\n      if (defaultValueExist) {\n        return defaultValue;\n      } else if (\n        Array.isArray(selectDropdownOptionsProp) &&\n        selectDropdownOptionsProp.length > 0\n      ) {\n        return getFirstDropdownOptionWithNameFieldToShow(\n          selectDropdownOptionsProp\n        );\n      } else {\n        return [];\n      }\n    };\n\n    // Styles\n    const classes = useStyles({\n      fontSizeValueRem,\n      numMaxLengthChars: useMemo(() => {\n        return getOptionMaxLengthNum(selectDropdownOptionsProp);\n      }, [selectDropdownOptionsProp, defaultValue]),\n    });\n\n    // ******* START SECTION state *******\n    const [selectOptionsState, setSelectOptionsState] = useState([]);\n    const [menuOpenState, setMenuOpenState] = useState(false);\n    const [\n      choosenDropdownOptionState,\n      setChoosenDropdownOptionState,\n    ] = useState({\n      positionIndex: 0,\n      dataElement: {},\n    });\n    // ******* END SECTION state *******\n\n    // Toggle the visibility of the select-dropdown\n    const toggleMenuDropdown = () => setMenuOpenState(!menuOpenState);\n\n    // handle what to do when an option in the menu is selected\n    const selectDropdownOption = (newPositionIndex = 0, dataElement = {}) => {\n      // update the upper section with the option choosen\n      setChoosenDropdownOptionState({\n        positionIndex: newPositionIndex,\n        dataElement,\n      });\n      // called the function passed to update the parent component\n      if (typeof onChange === \"function\") {\n        onChange(dataElement);\n      }\n      // close the menu if the 'closeAfterSelection' prop is true\n      if (closeAfterSelection) {\n        setMenuOpenState(false);\n      }\n    };\n\n    // return the HTML code obtained from the selectDropdownOptionsProp prop passed\n    const getHTMLOptionsMenu = (selectOptions) => {\n      let resultArray = [];\n\n      if (Array.isArray(selectOptions)) {\n        // return an array only with object which contain at least a field called as the content of nameFieldToShow\n        let filteredArray = getFilteredSelectDropdownOptions(\n          selectDropdownOptionsProp,\n          nameFieldToShow\n        );\n\n        resultArray = filteredArray.map((option, index) => {\n          const indexValue = doesDefaultValueExist ? index + 1 : index;\n\n          return (\n            <SingleOption\n              key={indexValue}\n              index={indexValue}\n              optionName={option?.[nameFieldToShow]}\n              dataElement={option}\n              fontSizeRem={getFontSizeValue(fontSizeValueRem)}\n              isThisSelected={\n                choosenDropdownOptionState?.positionIndex === indexValue\n              }\n              selectDropdownOption={selectDropdownOption}\n              tabIndex={0}\n            />\n          );\n        });\n      }\n\n      const defaultElement = (\n        <SingleOption\n          key={0}\n          index={0}\n          optionName={\n            doesDefaultValueExist ? defaultValue?.[nameFieldToShow] : \"\"\n          }\n          dataElement={defaultValue}\n          fontSizeRem={getFontSizeValue(fontSizeValueRem)}\n          isThisSelected={choosenDropdownOptionState?.positionIndex === 0}\n          selectDropdownOption={selectDropdownOption}\n          tabIndex={0}\n        />\n      );\n\n      // if there's the default value object, then return an array with the default object as the first element of the array\n      // otherwise return just the array (resultArray)\n      return doesDefaultValueExist\n        ? [defaultElement, ...resultArray]\n        : resultArray;\n    };\n\n    // Event Key handlers\n    const eventKeyHandlers = (event) => {\n      // trigger event when \"Enter\" button is clicked\n      if (event.keyCode === 13) {\n        toggleMenuDropdown();\n      }\n    };\n\n    // update the visible element (not the one in the options' menu), every time the props in the array below change\n    useEffect(() => {\n      setChoosenDropdownOptionState({\n        positionIndex: 0,\n        dataElement: defaultValue,\n      });\n    }, [selectDropdownOptionsProp, nameFieldToShow, defaultValue]);\n\n    // update the menu options list every time the state/props in the array below change\n    useEffect(() => {\n      const HTMLOptionsMenu = getHTMLOptionsMenu(selectDropdownOptionsProp);\n      setSelectOptionsState(HTMLOptionsMenu);\n    }, [\n      selectDropdownOptionsProp,\n      nameFieldToShow,\n      defaultValue,\n      choosenDropdownOptionState,\n    ]);\n\n    // update the visible element (not the one in the options' menu), every time the defaultValue changes\n    useEffect(() => {\n      const defaultValue = getDefaultValueChoosenDropdownOptionState(\n        doesDefaultValueExist\n      );\n\n      setChoosenDropdownOptionState({\n        positionIndex: 0,\n        dataElement: defaultValue,\n      });\n    }, [defaultValue]);\n\n    return (\n      <div id=\"select-dropdown\" className={classes.selectDropdown}>\n        <div\n          tabIndex={0}\n          onKeyDown={eventKeyHandlers}\n          className={classes.selectDropdownOpener}\n          onClick={toggleMenuDropdown}\n        >\n          <p className={classes.selectDropdownCurrentValue}>\n            {choosenDropdownOptionState?.dataElement?.[nameFieldToShow]}\n          </p>\n          <ArrowDown\n            className={`${classes.arrowDownIcon} ${\n              menuOpenState ? classes.arrowDownIconReverse : \"\"\n            }`}\n          />\n        </div>\n        <ul\n          className={`${classes.optionsContainer} ${\n            menuOpenState ? classes.openDropdown : classes.closeDropdown\n          }`}\n        >\n          {selectOptionsState}\n        </ul>\n      </div>\n    );\n  }\n);\n\nexport default SelectDropdown;\n","import React, { useState, useRef } from \"react\";\n// Constants\nimport { TEST } from \"../../constants\";\n// Material UI\nimport { TextField, FormControlLabel, Switch, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// Components\nimport SelectDropdown from \"../SelectDropdown/SelectDropdown\";\n\nconst useStyles = makeStyles((theme) => ({\n  formBaseStyle: {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    position: \"absolute\",\n    width: \"100%\",\n    bottom: \"25vh\",\n  },\n}));\n\nconst DashboardTest = () => {\n  const classes = useStyles();\n\n  const defaultNameFieldToShow = \"name\";\n  const defaultDefaultValue = { id: -1, name: \"Choose an option\" };\n  const defaultFontSizeRem = 1.2;\n\n  const defaultValueRef = useRef();\n  const fontSizeRemRef = useRef();\n  const JSONRef = useRef();\n  const nameFieldToShowRef = useRef();\n\n  const [stateProps, setStateProps] = useState({\n    nameFieldToShow: defaultNameFieldToShow,\n    closeAfterSelection: true,\n    fontSizeValueRem: 1.2,\n    defaultValue: defaultDefaultValue,\n    selectDropdownOptions: TEST.SELECT_DROPDOWN,\n  });\n\n  const [toggleState, setToggleState] = useState(\n    stateProps.closeAfterSelection\n  );\n\n  const getParsedJSON = (jsonToParse) => {\n    try {\n      // get the JSON parsed\n      return JSON.parse(jsonToParse);\n    } catch (exc) {\n      console.error(exc);\n      return undefined;\n    }\n  };\n\n  const getValidateJSON = (json = {}, fallbackValue = {}) => {\n    // the json must be a string and its length needs to be > 1\n    if (typeof json !== \"string\" || json.length === 0) {\n      return fallbackValue;\n    }\n    let parsedJSON = getParsedJSON(json);\n\n    if (parsedJSON !== undefined) {\n      return parsedJSON;\n    } else {\n      // remove blank spaces\n      let JSONNoSpaces = json.replace(/\\s/g, \"\");\n      let parsedJSONNoSpaces = getParsedJSON(JSONNoSpaces);\n      return parsedJSONNoSpaces === undefined\n        ? fallbackValue\n        : parsedJSONNoSpaces;\n    }\n  };\n\n  const updateState = () => {\n    const newJSONInsertedList = getValidateJSON(JSONRef.current.value, []);\n    const defaultValueJSON = getValidateJSON(defaultValueRef.current.value, []);\n\n    setStateProps({\n      ...stateProps,\n      nameFieldToShow: nameFieldToShowRef.current.value,\n      fontSizeValueRem: fontSizeRemRef.current.value,\n      defaultValue: defaultValueJSON,\n      selectDropdownOptions: newJSONInsertedList,\n      closeAfterSelection: toggleState,\n    });\n  };\n\n  return (\n    <>\n      <SelectDropdown\n        onChange={(obj) =>\n          console.log(\n            `This is the onchange function! Value selected => ${\n              obj[stateProps.nameFieldToShow]\n            }`\n          )\n        }\n        closeAfterSelection={stateProps?.closeAfterSelection}\n        defaultValue={\n          typeof stateProps?.defaultValue === \"string\"\n            ? JSON.parse(stateProps?.defaultValue)\n            : stateProps?.defaultValue\n        }\n        selectDropdownOptionsProp={stateProps?.selectDropdownOptions}\n        nameFieldToShow={stateProps?.nameFieldToShow}\n        fontSizeValueRem={stateProps?.fontSizeValueRem}\n      />\n      <div className={classes.formBaseStyle}>\n        <TextField\n          label=\"Default value\"\n          variant=\"outlined\"\n          defaultValue={JSON.stringify(defaultDefaultValue)}\n          inputRef={defaultValueRef}\n        />\n        <TextField\n          label=\"Font size (rem)\"\n          variant=\"outlined\"\n          defaultValue={defaultFontSizeRem}\n          inputRef={fontSizeRemRef}\n        />\n        <TextField\n          label=\"JSON objects array\"\n          variant=\"outlined\"\n          defaultValue={JSON.stringify(TEST.SELECT_DROPDOWN)}\n          inputRef={JSONRef}\n        />\n        <TextField\n          label=\"Name field to show\"\n          variant=\"outlined\"\n          defaultValue={defaultNameFieldToShow}\n          inputRef={nameFieldToShowRef}\n        />\n        <FormControlLabel\n          control={\n            <Switch\n              checked={toggleState}\n              onChange={() => setToggleState(!toggleState)}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Close after selection\"\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={updateState}>\n          UPDATE\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardTest;\n","import React from \"react\";\nimport DashboardTest from \"./components/DashboardTest/DashboardTest\";\nimport SelectDropdown from \"./components/SelectDropdown/SelectDropdown\";\n\nconst App = () => {\n  return <DashboardTest />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}